//
//  SonnensMouth.m
//  SonnensMouth
//
//  Created by david lam on 4/4/12   .
//  Copyright (c) 2012 dlam.me. All rights reserved.
//

#import "SonnensMouth.h"

@implementation SonnensMouth

static SonnensMouth* _sonnensMouth = nil;

@synthesize audioPlayer, cancelPlaySound, playingLastSoundInBarrage;

+(SonnensMouth *)sonnensMouth
{
    @synchronized(self) {
        if (_sonnensMouth == nil) {
            _sonnensMouth = [[SonnensMouth alloc] init];
        }
    }
    
    return _sonnensMouth;
}

+(void)setSonnensMouth:(SonnensMouth *)sonnensMouth
{
    @synchronized(self) {
        _sonnensMouth = sonnensMouth;
    }
}

+(UIAlertView *)newNoInternetConnectionAlertView
{    
    return [SonnensMouth newNoInternetConnectionAlertView:@"Doh, couldn't load! Check if you have an internet connection."];
}

+(UIAlertView *)newNoInternetConnectionAlertView:(NSString *)errorMessage
{
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Oh snap!" message:errorMessage delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];    
    return alertView;
}


-(void)playSound:(NSString *)soundName 
{
    NSString *soundFilePath = [[NSBundle mainBundle] pathForResource:soundName ofType:@"m4a"];
    
    if(!soundFilePath) {
        
        // The sound was generated by the user... so find it!
        
        NSString *td = NSTemporaryDirectory();
        NSString *p       = [NSString stringWithFormat:@"%@%@.m4a", td, soundName];
        NSData *soundData = [[NSFileManager defaultManager] contentsAtPath:p];

        if(soundData) {
            
            DebugLog(@"Found soundData at path, %@  ...so playing it!", p);
            
            NSError *err = nil;
            audioPlayer = [[AVAudioPlayer alloc] initWithData:soundData error:&err];
            [audioPlayer setDelegate:self];
            [audioPlayer setNumberOfLoops:0];   // default
            [audioPlayer prepareToPlay];
            [audioPlayer play];
            
            if(err)
                DebugLog(@"GOT ERR: %@", err);
                        
        }
        else {
            DebugLog(@"No soundData, so couldn't play it at path: %@   soundFilePath was: %@   soundName: %@", p, soundFilePath, soundName);
        }
    }
    else {
        
        // Then the sound was bundled with the app, so play it
        
        NSURL *fileURL = [[NSURL alloc] initFileURLWithPath: soundFilePath];
        NSError *err;
            
        if([fileURL checkResourceIsReachableAndReturnError:&err] == YES) {
            
            if(USE_AV_AUDIO_PLAYER) {
                 
                audioPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:fileURL error:&err];
                
                if(err) {
                    DebugLog(@"Error when playing with AVAudioPlayer: %@", err);
                }
                else {
                    @try {
                        //  4/23/12  Throwing exception in simulator but not device!
                        [audioPlayer setDelegate:self];
                        [audioPlayer setNumberOfLoops:0];   // default
                        [audioPlayer prepareToPlay];
                        [audioPlayer play];
                    }
                    @catch (NSException *exception) {
                        
                    }
                    @finally {
                        
                    }                    
                }                
            }
            else {                
                // Allows more than one sound to be playing at the same time!
                NSURL *soundEffectURL = [[NSBundle mainBundle] URLForResource: soundName withExtension:@"m4a"];
                CFURLRef soundURL = (__bridge CFURLRef) soundEffectURL;
                SystemSoundID soundID;
                AudioServicesCreateSystemSoundID(soundURL, &soundID);
                AudioServicesPlaySystemSound(soundID);     
            }
           
        }
        else {
            DebugLog(@"Doh! Didn't play sound... no sound named, %@", soundName);
        }
    }
}

-(void)playBarrage:(Barrage *)barrage
{
//    [self playArrayOfSounds:[barrage soundsAsArray] withStart:barrage.created];
    
    [self playBarrage:barrage thenDoThisWhenItsDone:nil];
}

-(void)playBarrage:(Barrage *)barrage thenDoThisWhenItsDone:(CompleteBlock)completeBlock
{
    playBarrageCompleteBlock = completeBlock;
    
    [self playArrayOfSounds:[barrage soundsAsArray] withStart:barrage.created];
}

-(void)playArrayOfSounds:(NSArray *)sounds withStart:(NSDate *)startingDate
{
    cancelPlaySound  = NO;
    playingLastSoundInBarrage = NO;        
    NSUInteger soundsCount = [sounds count];    
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0ul);
    
    dispatch_async(queue, ^{ 
        
        for (int i=0; i < soundsCount; i++) {
            
            if(cancelPlaySound)
                break;
            
            PlayedSound *curr = [sounds objectAtIndex:i];
            NSString *soundName = curr.soundName;
            
            //NSLog(@"SonnensMouthViewController.m:175   i:%d    Date: %@.  Time: %@.   Sound: %@", i, [dateFormat stringFromDate:when], [timeFormat stringFromDate:when], soundName);
            
            NSTimeInterval sleepDuration = 0.0;
            
            if(i == 0) {
                // play sound after (when - recordStart) seconds
                
                sleepDuration = [curr.date timeIntervalSinceNow] - [startingDate timeIntervalSinceNow];
            }
            else {
                // play sound after (when - prevWhen) seconds
                PlayedSound *prevSound = [sounds objectAtIndex:i-1];
                NSDate *prevWhen = prevSound.date;
                
                if(prevWhen) {
                    sleepDuration = [curr.date timeIntervalSinceNow] - [prevWhen timeIntervalSinceNow];
                }
            }
            
            if(i == soundsCount-1) {
                // on the last sound                
                playingLastSoundInBarrage = YES;
            }
            
            //NSLog(@"SonnensMouthViewController.m:197  playRecording()   sleeping for %f seconds", sleepDuration);
            
            [NSThread sleepForTimeInterval:sleepDuration];
            
            [[SonnensMouth sonnensMouth] playSound:soundName];
        }
    });
}



#pragma mark - <AVAudioPlayerDelegate>

- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag
{
//    DebugLog(@"successufully: %u", flag);
    
    if(playingLastSoundInBarrage) {
        DebugLog(@"Finished playing the last sound!");

        playingLastSoundInBarrage = NO;
        
        if(playBarrageCompleteBlock) {
            playBarrageCompleteBlock();
        }
    }
}

- (void)audioPlayerDecodeErrorDidOccur:(AVAudioPlayer *)player error:(NSError *)error
{
//    DebugLog(@"error: %@", error);
}

- (void)audioPlayerBeginInterruption:(AVAudioPlayer *)player
{
    DebugLog();
}

@end
